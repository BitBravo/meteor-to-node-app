#!/usr/bin/env node

const Path = require('path');
const Program = require('commander');

const Demteorizer = require('../lib/demeteorizer');

Program
  .version(require('../package.json').version)
  .option(
    '-o, --output <path>',
    'Output folder for converted application [.demeteorized]')
  .option(
    '-a, --architecture <arch>',
    'Build architecture to be generated')
  .option(
    '-d, --debug',
    'Build the application in debug mode (don\'t minify, etc)')
  .option(
    '-w, --server-only',
    'Only build the server platform (meteor 1.3 only)')
  .option(
    '-j, --json <json>',
    'JSON data to be merged into the generated package.json')
  .option(
    '-v, --verbose',
    'Output extra build information')
  .option(
    '-s, --server',
    'Remote DDP Server location [localhost:3000]')
  .option(
    '--node-version <version>',
    'Node version set in generated package.json')
  .option(
    '--npm-version <version>',
    'npm version set in generated package.json (defaults to latest)')
  .parse(process.argv);

console.log('Demeteorizing application...');

Program.output = Program.output || Path.join(process.cwd(), '.demeteorized');
Program.json = Program.json || '{}';

try {
  Program.json = JSON.parse(Program.json);
} catch(e) {
  console.error('Failed to parse provided --json, defaulting to {}');
  Program.json = {};
}

var options = {
  debug: Boolean(Program.debug),
  serverOnly: Boolean(Program.serverOnly),
  input: process.cwd(),
  directory: Program.output,
  json: Program.json,
  architecture: Program.architecture,
  verbose: Boolean(Program.verbose),
  server: Program.server,
  npmVersion: Program.npmVersion,
  nodeVersion: Program.nodeVersion
};

Demteorizer(options, (err) => {
  if (err) {
    console.error(err instanceof Error ? err.message : err);
    return process.exit(1);
  }

  console.log('Demeteorization complete.');
});
